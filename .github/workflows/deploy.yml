name: "Deploy to Environment"

on:
  workflow_call:
    inputs:
      workspace_name:
        description: "The terraform workspace to target for environment actions"
        required: true
        type: string
      version_tag:
        description: "The docker image tag to deploy in the environment"
        required: true
        type: string
    secrets:
      aws_access_key_id:
        description: "AWS Access Key ID"
        required: true
      aws_secret_access_key:
        description: "AWS Secret Access Key"
        required: true
      ssh_private_key_allow_list_repository:
        required: true

jobs:
  terraform_environment_workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - uses: unfor19/install-aws-cli-action@v1
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-west-1
          role-duration-seconds: 3600
          role-session-name: OPGDataLpaUIDGithubAction

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./terraform/aws

      - name: Terraform Plan
        id: terraform_plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_app_version: ${{ inputs.version_tag }}
        run: |
          terraform workspace show
          echo "plan_summary=$(terraform plan -no-color -lock-timeout=300s -input=false -parallelism=30 | grep -ioE 'Plan: [[:digit:]]+ to add, [[:digit:]]+ to change, [[:digit:]]+ to destroy|No changes. Your infrastructure matches the configuration.')" >> $GITHUB_OUTPUT
          terraform plan -lock-timeout=300s -input=false -out=${{ env.TF_WORKSPACE }}.plan -parallelism=30

        working-directory: ./terraform/aws

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_app_version: ${{ inputs.version_tag }}
        run: |
          terraform apply -lock-timeout=300s -input=false -auto-approve -parallelism=30 ${{ env.TF_WORKSPACE }}.plan
        working-directory: ./terraform/aws
